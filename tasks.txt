1. Project Setup & Core Infrastructure

    [*] Create a new GitHub repository for the project.
    [*] Set up the project environment (Node.js, npm/yarn, etc.).
    [*] Choose and install necessary dependencies (Express.js, database driver, Redis client, etc.).
    [*] Define project structure (controllers, models, services, routes, etc.).

2. User Authentication

    [*] Implement Google Sign-In using a suitable library.
    [*] Create user model with necessary fields (ID, email, name, etc.).
    [*] Implement user registration and login endpoints.
    [*] Implement session management (e.g., JWT).

3. URL Shortening Logic

    [*] Create URL model with fields (longURL, shortURL, alias, topic, createdAt, userId, etc.).
    [*] Implement URL shortening algorithm (e.g., base62 encoding).
    [*] Implement custom alias handling (validation, uniqueness check).
    [*] Implement rate limiting middleware.

4. API Endpoints

    [*] Create Short URL API (/api/shorten)
        [*] Validate request body (longURL).
        [*] Generate short URL and alias (if not provided).
        [*] Create URL record in database.
        [*] Return short URL and other relevant data.
    [*] Redirect Short URL API (/api/shorten/{alias})
        [*] Fetch URL record from database.
        [*] Log redirect event (IP, user-agent, timestamp, etc.).
        [*] Redirect to long URL.
    [*] Get URL Analytics API (/api/analytics/{alias})
        [*] Fetch URL record and its analytics data from database.
        [*] Calculate and return relevant metrics (total clicks, unique users, etc.).
    [*] Get Topic-Based Analytics API (/api/analytics/topic/{topic})
        [*] Fetch all URLs under the specified topic.
        [*] Calculate and return aggregated analytics for the topic.
    [*] Get Overall Analytics API (/api/analytics/overall)
        [*] Fetch all URLs created by the user.
        [*] Calculate and return overall analytics for the user.

5. Data Storage & Caching

    [*] Choose and configure database (e.g., PostgreSQL, MongoDB).
    [*] Create database schema for users and URLs.
    [*] Implement data models and database interactions.
    [*] Set up Redis for caching (short URLs, analytics data).

6. Audience Data Collection

    [*] Implement mechanisms to collect audience data (IP, user-agent, OS, device).
    [*] Store and process audience data (e.g., using a separate analytics service).

7. Testing & Error Handling

    [] Write unit tests for individual components (models, services).
    [] Write integration tests for API endpoints.
    [] Implement robust error handling and return appropriate error responses.

8. Deployment & Documentation

    [] Create a Dockerfile to containerize the application.
    [] Deploy the application to a cloud platform (e.g., Heroku, AWS, Google Cloud).
    [] Generate API documentation using Swagger or a similar tool.
    [] Write a comprehensive README file.

9. Refinement & Iteration

    [] Continuously refine the application based on testing, user feedback, and performance analysis.
    [] Consider adding new features (e.g., social sharing, QR code generation).